
// ‚úÖ index.js (‡∏ù‡∏±‡πà‡∏á Render - Webhook)
const express = require('express');
const fs = require('fs');
const axios = require('axios');
const app = express();
const PORT = process.env.PORT || 10000;

app.use(express.json());

let tempQueue = {}; // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° userId

// üì• POST: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô queue.json
app.post('/queue', (req, res) => {
  const queue = req.body;
  try {
    fs.writeFileSync('queue.json', JSON.stringify(queue, null, 2));
    res.send({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞' });
  } catch (err) {
    res.status(500).send({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå queue ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞' });
  }
});

// üì§ GET: ‡∏™‡πà‡∏á queue.json
app.get('/queue', (req, res) => {
  try {
    const data = fs.readFileSync('queue.json', 'utf8');
    res.setHeader('Content-Type', 'application/json');
    res.send(data);
  } catch (err) {
    res.status(500).send({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå queue.json ‡∏Ñ‡πà‡∏∞' });
  }
});

// üß† POST: LINE Webhook
app.post('/webhook', async (req, res) => {
  const events = req.body.events;
  if (!events || events.length === 0) return res.sendStatus(200);

  const event = events[0];
  const userId = event.source.userId;
  const message = event.message?.text?.trim();

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô"
  if (message === '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô' || message.toLowerCase() === 'topup') {
    tempQueue[userId] = { step: 'amount' };
    return reply(event.replyToken, `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏∞
- 100 ‡∏ö‡∏≤‡∏ó ‡πÑ‡∏î‡πâ 1,100 points
- 500 ‡∏ö‡∏≤‡∏ó ‡πÑ‡∏î‡πâ 5,500 points
- 1,000 ‡∏ö‡∏≤‡∏ó ‡πÑ‡∏î‡πâ 11,000 points
- 3,000 ‡∏ö‡∏≤‡∏ó ‡πÑ‡∏î‡πâ 33,000 points
- 10,000 ‡∏ö‡∏≤‡∏ó ‡πÑ‡∏î‡πâ 113,000 points`);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠
  const state = tempQueue[userId];
  if (state?.step === 'amount') {
    const amt = parseInt(message);
    if (!isNaN(amt)) {
      tempQueue[userId] = { step: 'aid', amount: amt };
      return reply(event.replyToken, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™ AID (25 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£) ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞');
    }
  }

  if (state?.step === 'aid') {
    if (message.length === 25 && /^[A-Z0-9]+$/.test(message)) {
      const newItem = { amount: state.amount, aid: message, status: 'pending' };
      try {
        await axios.post('http://localhost:10000/queue', newItem);
        delete tempQueue[userId];
        return reply(event.replyToken, `‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞
‡∏¢‡∏≠‡∏î ${state.amount} ‡∏ö‡∏≤‡∏ó AID: ${message}
‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡πà‡∏∞`);
      } catch (e) {
        return reply(event.replyToken, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏∞');
      }
    } else {
      return reply(event.replyToken, 'AID ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 25 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞');
    }
  }

  res.sendStatus(200);
});

function reply(token, msg) {
  return axios.post('https://api.line.me/v2/bot/message/reply', {
    replyToken: token,
    messages: [{ type: 'text', text: msg }]
  }, {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer <fedX6qeThfl/AkLuJjqm/NZsw6XJQzGuU3YV/Uplx/LFXyF/d1jhjwDeOPMiX0CNbYBV46CuxbwhgzxVLqsrFlABDsvWC+rVkLvLNQhQ1Q6kUeqO+HDwiiFWbTnKQC5u6zgIiuihoT6SA/DbXNQ4PwdB04t89/1O/w1cDnyilFU=>'
    }
  });
}

app.listen(PORT, () => {
  console.log(`üöÄ Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï ${PORT}`);
});
